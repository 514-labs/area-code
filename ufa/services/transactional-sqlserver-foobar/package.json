{
  "name": "transactional-sqlserver",
  "version": "1.0.0",
  "description": "SQL Server with Debezium CDC infrastructure and fastify API for streaming transactional data changes",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "tsc",
    "dev": "pnpm sqlserver:start",
    "dev:server": "pnpm exec tsx watch src/server.ts",
    "dev:full": "pnpm sqlserver:start && pnpm dev:server",
    "start": "node dist/server.js",
    "clean": "rm -rf dist",
    "typecheck": "tsc --noEmit",
    
    "ufa:dev": "echo '‚è≥ Waiting for analytical-sqlserver-moose-foobar network...' && pnpm ufa:dev:wait-for-network && docker compose up -d && echo '‚è≥ Waiting for containers to be ready...' && sleep 5 && ./scripts/setup-sqlserver.sh all && pnpm dev:server",
    "ufa:dev:wait-for-network": "i=0; while [ $i -lt 30 ]; do if docker network ls | grep -q analytical-sqlserver-moose-foobar_default; then echo '‚úÖ Network ready!'; exit 0; else echo \"  Waiting... ($((i+1))/30)\"; sleep 2; i=$((i+1)); fi; done; echo '‚ùå Network not found after 60s'; exit 1",
    "ufa:dev:seed": "./scripts/setup-sqlserver.sh seed --foo-count 100000 --bar-count 10000",
    "ufa:dev:clean": "pnpm connector:delete:safe && docker compose down && docker volume prune -f",
    "ufa:dev:reset": "pnpm ufa:dev:clean && pnpm ufa:dev",
    "ufa:dev:verify": "./scripts/setup-sqlserver.sh verify",
    "ufa:dev:demo-cdc": "./scripts/setup-sqlserver.sh connector && ./scripts/setup-sqlserver.sh seed --foo-count 1000 --bar-count 3000 && echo 'üéâ CDC Demo: 1000 foo + 3000 bar records inserted and captured!'",
    
    "sqlserver:start": "docker compose up -d",
    "sqlserver:stop": "docker compose down",
    "sqlserver:restart": "docker compose restart",
    "sqlserver:reset": "docker compose down -v && docker compose up -d",
    "sqlserver:logs": "docker compose logs -f",
    "sqlserver:status": "docker compose ps",
    "sqlserver:setup": "./scripts/setup-sqlserver.sh all",
    "sqlserver:setup:custom": "./scripts/setup-sqlserver.sh all --foo-count",
    "sqlserver:clean": "./scripts/setup-sqlserver.sh clean",
    
    "connector:register": "curl -X POST -H 'Content-Type: application/json' --data @register-sqlserver.json http://localhost:8084/connectors",
    "connector:status": "curl -X GET http://localhost:8084/connectors/SQLServerToMooseConnector/status",
    "connector:delete": "curl -X DELETE http://localhost:8084/connectors/SQLServerToMooseConnector",
    "connector:delete:safe": "echo 'üßπ Attempting to delete connector (ignore if fails)...' && (curl -X DELETE http://localhost:8084/connectors/SQLServerToMooseConnector --max-time 5 --fail-with-body 2>/dev/null && echo '‚úÖ Connector deleted successfully') || echo '‚ö†Ô∏è  Connector deletion failed or connector not found (continuing anyway)'",
    "connector:list": "curl -X GET http://localhost:8084/connectors"
  },
  "dependencies": {
    "fastify": "^5.4.0",
    "tedious": "^18.6.1",
    "@fastify/cors": "^10.0.1",
    "@fastify/swagger": "^9.5.1",
    "@fastify/swagger-ui": "^5.2.3",
    "dotenv": "^16.3.1",
    "pino-pretty": "^13.0.0",
    "zod": "^3.22.4",
    "@workspace/models": "workspace:*"
  },
  "devDependencies": {
    "@repo/eslint-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@types/node": "^20.0.0",
    "@types/tedious": "^4.0.14",
    "tsx": "^4.7.0",
    "typescript": "^5.3.0"
  },
  "keywords": [
    "fastify",
    "sqlserver",
    "debezium",
    "cdc",
    "change-data-capture",
    "kafka",
    "docker",
    "api",
    "transactional"
  ],
  "author": "",
  "license": "MIT"
}
